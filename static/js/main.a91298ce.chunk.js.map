{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","fields","startRef","useRef","stopRef","useState","youtubeIdRef","setYoutubeId","startMs","setStartMs","stopMs","setStopMs","endless","setEndless","player","setPlayer","playing","setPlaying","handleCopy","useCallback","navigator","clipboard","writeText","JSON","stringify","id","title","description","start","current","value","stop","youtubeId","avatar","onProgress","e","process","REACT_APP_DEBUG","console","log","playedSeconds","seekTo","Grid","container","spacing","direction","alignItems","justify","style","minHeight","item","url","controls","width","onReady","progressInterval","height","display","TextField","onChange","target","defaultValue","marginLeft","inputRef","Select","labelId","label","map","field","MenuItem","disableRipple","Button","type","color","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a91298ce.chunk.js","sourcesContent":["import ReactPlayer from \"react-player/lazy\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { Button, TextField, Select, MenuItem, Grid } from \"@material-ui/core\";\n\nfunction App() {\n  const fields = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const startRef = useRef();\n  const stopRef = useRef();\n  const startMsRef = useRef();\n  const stopMsRef = useRef();\n  const [youtubeIdRef, setYoutubeId] = useState(\"LZuozNHArQ0\");\n  const [startMs, setStartMs] = useState(0);\n  const [stopMs, setStopMs] = useState(0);\n\n  const [searcBy, setSearchBy] = useState();\n  const [endless, setEndless] = useState(false);\n  const [player, setPlayer] = useState();\n  const [playing, setPlaying] = useState(true);\n  const onReady = (player) => {\n    player.seekTo(startRef.current.value);\n    setPlayer(player);\n  };\n\n  const handlePlay = () => {\n    player.seekTo(startRef.current.value + \".\" + startMs);\n    setPlaying(true);\n    setEndless(false);\n  };\n  const handleLoop = () => {\n    player.seekTo(startRef.current.value + \".\" + startMs);\n    setPlaying(true);\n    setEndless(true);\n  };\n  const handleStop = () => {\n    setPlaying(false);\n    setEndless(false);\n  };\n  const handleCopy = useCallback(() => {\n    navigator.clipboard.writeText(\n      JSON.stringify(\n        {\n          id: \"111-111-111-111-111\",\n          title: \"title\",\n          description: \"description\",\n          start: startRef.current.value + \".\" + startMs,\n          stop: stopRef.current.value + \".\" + stopMs,\n          youtubeId: \"yD8WavgzrXU\",\n          avatar: 1,\n        },\n        null,\n        4\n      ) + \",\\n\"\n    );\n  }, [startRef.current, stopRef.current, startMs, stopMs, endless]);\n\n  const onProgress = useCallback(\n    (e) => {\n      if (process.env.REACT_APP_DEBUG)\n        console.log(\"e.playedSeconds\", e.playedSeconds);\n      if (e.playedSeconds > stopRef.current.value + \".\" + stopMs) {\n        if (endless) {\n          player.seekTo(startRef.current.value + \".\" + startMs);\n        } else {\n          setPlaying(false);\n        }\n      }\n    },\n    [startRef.current, stopRef.current, startMs, stopMs, endless]\n  );\n\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"center\"\n      style={{ minHeight: \"100vh\" }}\n    >\n      <Grid item>\n        <div>\n          <ReactPlayer\n            url={\"https://www.youtube.com/watch?v=\" + youtubeIdRef}\n            playing={playing}\n            controls={true}\n            width=\"70\"\n            onReady={onReady}\n            onProgress={onProgress}\n            progressInterval={100}\n            height=\"480px\"\n            width=\"640px\"\n          />\n          <div>\n            <div style={{ display: \"inline-flex\" }}>\n              <div>\n                <TextField\n                  style={{ width: 130 }}\n                  onChange={(e) => setYoutubeId(e.target.value)}\n                  defaultValue=\"LZuozNHArQ0\"\n                />\n              </div>\n              <div style={{ marginLeft: 10 }}>\n                <TextField\n                  style={{ width: 50 }}\n                  inputRef={startRef}\n                  defaultValue=\"10\"\n                />\n              </div>\n              <div>\n                <Select\n                  labelId=\"typesLabel\"\n                  label=\"Types\"\n                  value={startMs}\n                  onChange={(e) => setStartMs(e.target.value)}\n                  style={{ width: 40 }}\n                >\n                  {fields.map((field) => (\n                    <MenuItem key={field} value={field} disableRipple>\n                      {field}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </div>\n              <div style={{ marginLeft: 10 }}>\n                <TextField\n                  style={{ width: 50 }}\n                  inputRef={stopRef}\n                  defaultValue=\"11\"\n                />\n              </div>\n              <div>\n                <Select\n                  labelId=\"typesLabel\"\n                  label=\"Types\"\n                  value={stopMs}\n                  onChange={(e) => setStopMs(e.target.value)}\n                  style={{ width: 40 }}\n                >\n                  {fields.map((field) => (\n                    <MenuItem key={field} value={field} disableRipple>\n                      {field}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </div>\n              <div>\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  onClick={() => handlePlay()}\n                >\n                  Play\n                </Button>\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  onClick={() => handleLoop()}\n                >\n                  Loop\n                </Button>\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  onClick={() => handleStop()}\n                >\n                  Stop\n                </Button>\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  onClick={() => handleCopy()}\n                >\n                  Copy\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}